1.How many times was the app downloaded? 
SELECT COUNT(app_download_key) as total_downloads
FROM app_downloads;
23608


2.How many users signed up on the app?
SELECT COUNT(user_id) as total_signups
FROM signups;
17623

3.How many rides were requested through the app?
SELECT COUNT(ride_id) as total_rides
FROM ride_requests;
385477

4.How many rides were requested and completed through the app?
SELECT COUNT(ride_id) as rides_completed
FROM transactions;
223652

5.How many rides were requested and how many unique users requested a ride?
SELECT COUNT(DISTINCT user_id) as unique_users
FROM ride_requests;
12406

6.What is the average time of a ride from pick up to drop off?
SELECT AVG(dropoff_ts - pickup_ts) AS average_time_diff
FROM ride_requests;
52 minutes 36.738 seconds

7.How many rides were accepted by a driver?
SELECT COUNT(accept_ts) AS total_accepted
FROM ride_requests;
248379

8.How many rides did we successfully collect payments and how much was collected?
SELECT COUNT(charge_status) AS total_rides,
    SUM(purchase_amount_usd) AS collected
FROM transactions
WHERE charge_status = 'Approved';
212628, 4251667.610

9.How many ride requests happened on each platform?
SELECT COUNT(rr.ride_id) AS ride_requests, 
        platform
FROM app_downloads a
JOIN signups s 
    ON a.app_download_key = s.session_id 
JOIN ride_requests rr 
    ON s.user_id = rr.user_id
GROUP BY platform; 
112317 - android
234693 - ios
38467 - web

10.What is the drop-off from users signing up to users requesting a ride?
SELECT 
    COUNT(DISTINCT s.user_id) AS signup_count,
    COUNT(DISTINCT rr.user_id) AS ride_request_count,
    (COUNT(DISTINCT s.user_id) - COUNT(DISTINCT rr.user_id)) AS drop_off_count,
    ((COUNT(DISTINCT s.user_id) - COUNT(DISTINCT rr.user_id)) / COUNT(DISTINCT s.user_id)::float) AS drop_off_rate
FROM signups s 
LEFT JOIN ride_requests rr
    ON s.user_id = rr.user_id;
29.6%


11.How many unique users completed a ride through the Metrocar app?
SELECT COUNT(DISTINCT user_id) as unique_users
FROM ride_requests rr
JOIN transactions t
    ON rr.ride_id = t.ride_id
WHERE charge_status ='Approved';
6233

12.Of the users that signed up on the app, 
what percentage these users requested a ride? 
requested / total signup and * 100

SELECT
  (COUNT(DISTINCT rr.user_id) * 100.0) / COUNT(DISTINCT s.user_id) AS percentage_requested
FROM signups s
LEFT JOIN
  ride_requests rr 
    ON s.user_id = rr.user_id;
70.39

13.Of the users that signed up on the app, 
what percentage these users completed a ride?
SELECT
  (COUNT(DISTINCT rr.user_id) * 100.0) / COUNT(DISTINCT s.user_id) AS percentage_completed
FROM signups s
LEFT JOIN ride_requests rr 
   ON s.user_id = r.user_id
AND rr.dropoff_ts IS NOT NULL;
35.36

14.Using the percent of previous approach, 
what are the user-level conversion rates for the first 3 stages of the funnel 
(app download to signup and signup to ride requested)?
SELECT
  (COUNT(DISTINCT s.user_id) * 100.0) / COUNT(DISTINCT a.app_download_key ) AS conversion_rate_signup,
  (COUNT(DISTINCT rr.user_id) * 100.0) / COUNT(DISTINCT s.user_id) AS conversion_rate_ride_requested
FROM app_downloads a
LEFT JOIN signups s 
   ON a.app_download_key = s.session_id
LEFT JOIN ride_requests rr 
   ON s.user_id = rr.user_id;
74.6%, 70.4%


15.Using the percent of top approach, 
what are the user-level conversion rates for the first 3 stages of the funnel 
(app download to signup and signup to ride requested)?
SELECT
  (COUNT(DISTINCT s.user_id) * 100.0) / COUNT(DISTINCT a.app_download_key ) AS conversion_rate_signup,
  (COUNT(DISTINCT rr.user_id) * 100.0) / COUNT(DISTINCT a.app_download_key ) AS conversion_rate_ride_requested
FROM app_downloads a
LEFT JOIN signups s 
   ON a.app_download_key = s.session_id
LEFT JOIN ride_requests rr 
   ON s.user_id = rr.user_id;
74.6%, 52.5%


16.Using the percent of previous approach, 
what are the user-level conversion rates for the 
following 3 stages of the funnel? 
1. signup, 2. ride requested, 3. ride completed 

SELECT
  (COUNT(DISTINCT rr.user_id) * 100.0) / COUNT(DISTINCT s.user_id) AS conversion_rate_ride_requested,
  (COUNT(DISTINCT
        CASE
            WHEN rr.dropoff_ts IS NOT NULL
            THEN rr.user_id
        END
    ) * 100.0) / COUNT(DISTINCT rr.user_id) AS conversion_rate_ride_completed
FROM signups s 
LEFT JOIN ride_requests rr 
    ON s.user_id = rr.user_id;
70.4%, 50.2%

17.Using the percent of top approach, 
what are the user-level conversion rates for the 
following 3 stages of the funnel? 
1. signup, 2. ride requested, 3. ride completed 

SELECT
  (COUNT(DISTINCT rr.user_id) * 100.0) / COUNT(DISTINCT s.user_id) AS conversion_rate_ride_requested,
  (COUNT(DISTINCT
        CASE
            WHEN rr.dropoff_ts IS NOT NULL
            THEN rr.user_id
        END
    ) * 100.0) / COUNT(DISTINCT s.user_id) AS conversion_rate_ride_completed
FROM signups s 
LEFT JOIN ride_requests rr 
    ON s.user_id = rr.user_id;
70.4%, 35.4%

====================================================================================================

WITH user_ride_status AS (
    SELECT
        user_id,
        MAX(
            CASE
                WHEN dropoff_ts IS NOT NULL
                THEN 1
                ELSE 0
            END
        ) AS ride_completed
    FROM ride_requests
    GROUP BY user_id
)
SELECT
    COUNT(*) AS total_users_ride_requested,
    SUM(ride_completed) AS total_users_ride_completed
FROM user_ride_status;

total_users_ride_requested = 12406
total_users_ride_completed = 6233

===================================================
funnel code:

SELECT COUNT(*), 'app_downloads' AS funnel_steps
FROM app_downloads

UNION

SELECT COUNT(*), 'signups' AS funnel_steps
FROM signups

UNION

SELECT COUNT(DISTINCT user_id), 'rides_requested' AS funnel_steps
FROM ride_requests

UNION

SELECT COUNT(DISTINCT user_id), 'rides_completed' AS funnel_steps
FROM ride_requests
WHERE cancel_ts IS NULL;
23608 - app_downloads
17623 - signups
12406 - rides_requested
6233 - rides_completed

or with lag function

WITH TEMP1 AS (
  SELECT COUNT(*) AS counter, 'app_downloads' AS funnel_steps
FROM app_downloads
UNION
SELECT COUNT(*) AS counter, 'signups' AS funnel_steps
FROM signups
UNION
SELECT COUNT(DISTINCT user_id) AS counter, 'rides_requested' AS funnel_steps
FROM ride_requests
UNION
SELECT COUNT(DISTINCT user_id) AS counter, 'rides_completed' AS funnel_steps
FROM ride_requests
WHERE cancel_ts IS NULL
)
SELECT *,
lag(counter,1) OVER(ORDER BY counter DESC) AS lag_num,
counter - lag(counter,1) OVER(ORDER BY counter DESC) AS difference
FROM temp1;


=============================================================
SELECT accept_ts - request_ts as waiting_time, rr.*
FROM ride_requests rr;
-waiting time

==============================================================

SELECT COUNT(*), age_range
FROM signups s
GROUP BY age_range;

1865 - 18-24
3447 - 25-34
5181 - 35-44
1826- 45-54
5304 - NULL

================================================================

SELECT EXTRACT(HOUR FROM request_ts) AS time_hour,
			 COUNT(*)
FROM ride_requests
GROUP BY time_hour
LIMIT 1000;
-how many ride were requested at each hour

SELECT EXTRACT(HOUR FROM request_ts) AS time_hour,
			 COUNT(*),
       CASE WHEN cancel_ts IS NULL THEN 'accepted' ELSE 'cancelled' END AS cancelled_status
FROM ride_requests
GROUP BY time_hour, cancelled_status
LIMIT 1000;
======================================================================
==============

with user_details AS (
	SELECT app_download_key, user_id, platform, age_range, date(download_ts) AS download_dt
	FROM app_downloads
	LEFT JOIN signups
	  ON app_downloads.app_download_key = signups.session_id),
downloads AS (
	SELECT 0 as funnel_step, 
		'download' as funnel_name,
		platform, 
		age_range,
		download_dt,
		COUNT (DISTINCT app_download_key) as users_count,
		0 as count_rides
	FROM user_details
	GROUP BY platform, age_range, download_dt),

signup AS (
	SELECT 1 as funnel_step,
		'signup' as funnel_name,
		user_details.platform,
		user_details.age_range,
		user_details.download_dt,
		COUNT (DISTINCT user_id) as users_count,
		0 as count_rides
	FROM signups
	JOIN user_details
	USING (user_id)
	WHERE signup_ts is not null
	GROUP BY user_details.platform, user_details.age_range, user_details.download_dt),

requested AS (
	SELECT 2 as funnel_step,
		'ride_requested' as funnel_name,
		user_details.platform,
		user_details.age_range,
		user_details.download_dt,
		COUNT (DISTINCT user_id) as users_count,
		COUNT (DISTINCT ride_id) as count_rides
	FROM ride_requests
	JOIN user_details
	USING (user_id)
	WHERE request_ts is not null
	GROUP BY user_details.platform, user_details.age_range, user_details.download_dt),

completed AS (
	SELECT 3 as funnel_step, 
		'ride_completed' as funnel_name, 
		user_details.platform,
		user_details.age_range,
		user_details.download_dt,
		COUNT (DISTINCT user_id) as users_count,
		COUNT (DISTINCT ride_id) as count_rides
	FROM ride_requests
	JOIN user_details
	USING (user_id)
	WHERE dropoff_ts is not null
	GROUP BY user_details.platform, user_details.age_range, user_details.download_dt)

SELECT *
FROM downloads
UNION
SELECT *
FROM signup
UNION
SELECT *
FROM requested
UNION
SELECT *
FROM completed
ORDER BY funnel_step, platform, age_range, download_dt;



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

with user_details AS (
	SELECT app_download_key, signups.user_id, platform, age_range, ride_id, date(download_ts) AS download_dt
	FROM app_downloads
	LEFT JOIN signups
	  ON app_downloads.app_download_key = signups.session_id
  LEFT JOIN ride_requests
  	ON ride_requests.user_id = signups.user_id),
downloads AS (
	SELECT 0 as funnel_step, 
		'download' as funnel_name,
		platform, 
		age_range,
		download_dt,
		COUNT (DISTINCT app_download_key) as users_count,
		0 as count_rides
	FROM user_details
	GROUP BY platform, age_range, download_dt),

signup AS (
	SELECT 1 as funnel_step,
		'signup' as funnel_name,
		user_details.platform,
		user_details.age_range,
		user_details.download_dt,
		COUNT (DISTINCT signups.user_id) as users_count,
		0 as count_rides
	FROM signups
	JOIN user_details
	USING (user_id)
	WHERE signup_ts is not null
	GROUP BY user_details.platform, user_details.age_range, user_details.download_dt),

requested AS (
	SELECT 2 as funnel_step,
		'ride_requested' as funnel_name,
		user_details.platform,
		user_details.age_range,
		user_details.download_dt,
		COUNT (DISTINCT user_id) as users_count,
		COUNT (DISTINCT ride_requests.ride_id) as count_rides
	FROM ride_requests
	JOIN user_details
	USING (user_id)
	WHERE request_ts is not null
	GROUP BY user_details.platform, user_details.age_range, user_details.download_dt),

accepted AS (
  	SELECT 3 as funnel_step,
  	'ride_accepted' as funnel_name,
  	user_details.platform,
		user_details.age_range,
		user_details.download_dt,
  	COUNT (DISTINCT user_id) as users_count,
		COUNT (DISTINCT ride_requests.ride_id) as count_rides
  	FROM ride_requests
	JOIN user_details
	USING (user_id)
	WHERE accept_ts is not null
	GROUP BY user_details.platform, user_details.age_range, user_details.download_dt),

completed AS (
	SELECT 4 as funnel_step, 
		'ride_completed' as funnel_name, 
		user_details.platform,
		user_details.age_range,
		user_details.download_dt,
		COUNT (DISTINCT user_id) as users_count,
		COUNT (DISTINCT ride_requests.ride_id) as count_rides
	FROM ride_requests
	JOIN user_details
	USING (user_id)
	WHERE dropoff_ts is not null
	GROUP BY user_details.platform, user_details.age_range, user_details.download_dt),
  
payment AS (
  SELECT 5 as funnel_step,
  	'payment' as funnel_name,
  	user_details.platform,
		user_details.age_range,
		user_details.download_dt,
	  COUNT (DISTINCT user_id) AS users_count,
  	COUNT (DISTINCT transactions.ride_id) as count_rides
 	FROM transactions
  JOIN user_details
	USING (ride_id)
	WHERE charge_status = 'Approved' 
  GROUP BY user_details.platform, user_details.age_range, user_details.download_dt),
  
reviews AS (
  SELECT 6 as funnel_step,
  	'review' as funnel_name,
  	user_details.platform,
		user_details.age_range,
		user_details.download_dt,
  	COUNT (DISTINCT reviews.user_id) as users_count,
  	COUNT (DISTINCT reviews.ride_id) as count_rides
  FROM reviews
  JOIN user_details
  USING (ride_id)
  GROUP BY user_details.platform, user_details.age_range, user_details.download_dt)
  
SELECT *
FROM downloads
UNION
SELECT *
FROM signup
UNION
SELECT *
FROM requested
UNION
SELECT *
FROM accepted
UNION
SELECT *
FROM completed
UNION
SELECT *
FROM payment
UNION
SELECT *
FROM reviews
ORDER BY funnel_step, platform, age_range, download_dt;


























